#!/bin/bash
#Script to submit to a GCloud dataproc cluster. Copy this file to submit-gcloud.sh and 
#edit variables accordingly.

#Region where the cluster is running (change as needed)
REGION=asia-northeast1

#The first argument is the cluster ID. The remaining arguments will be passed to the Discount driver process.
CLUSTER=$1
shift

MAXRES=spark.driver.maxResultSize=2g

#High memory
PARTITIONS=spark.sql.shuffle.partitions=4000
#Low memory
#PARTITIONS=spark.sql.shuffle.partitions=14000

#Max size of input splits in bytes. A smaller number reduces memory usage but increases the number of
#partitions for the first stage. If this variable is unset, Spark's default of 128 MB will be used.
SPLIT=spark.hadoop.mapreduce.input.fileinputformat.split.maxsize=$((64 * 1024 * 1024))

#YARN memory is allocated using on GCP using executor memory and memoryOverhead.
#The number of executors that will be spawned by YARN is (total memory)/(executor memory + memoryOverhead).
#Furthermore, on GCP every executor runs two task threads by default.
#Below are some suggested settings for EXECMEM and OVERHEAD. It is also safe to leave them blank,
#in which case the GCP environment will supply some default settings.

#The two settings below are suitable for k-mer counting on highcpu 16-core nodes.
#They also work well for standard 4-core nodes.
#OVERHEAD=spark.executor.memoryOverhead=768
#EXECMEM=spark.executor.memory=4352m

#Half memory setting for standard-16 nodes. Artificially inflated overhead to limit #executors
#OVERHEAD=spark.executor.memoryOverhead=$((11171 + 1117))
#EXECMEM=spark.executor.memory=11171m

#Properties to actually use in the job. Empty values cannot be in this list.
PROPERTIES="$PARTITIONS,$MAXRES,$SPLIT"

#Change 2.12 to 2.11 below if compiling for scala 2.11.
exec gcloud --verbosity=info  dataproc jobs submit spark --region $REGION --cluster $CLUSTER \
  --class com.jnpersson.discount.spark.Discount --jars target/scala-2.12/hypercut_2.12-0.1.0-SNAPSHOT.jar \
  --properties $PROPERTIES -- "$@"

